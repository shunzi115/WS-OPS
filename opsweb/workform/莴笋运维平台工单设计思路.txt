工单系统设计思路

设计运维工单的初衷：
<1> 工单相当于一个记事本，让领导清楚运维的工作以及贡献，避免年终绩效考核时被选择性忘记运维的付出
<2> 规范 运维与其他小组同事协作的方式，做到有据可查
<3> 规范运维工作的流程，规避口头上的流程无法持续

工单设计思路：
<1> 每一个工单都属于一种类型(工单类型: 发布/回滚，SQL执行，系统权限审核、应用环境部署、服务器资源申请等)
<2> 每一种工单类型都拥有一套审批流程
<3> 每一套审批流程都会包含几个步骤
<4> 每一个步骤 都要求有一个或多个‘审批/执行’权限的人以及审批/执行结果


因此 一个工单的创建 根据其所属类型，也就确定了其特定的流程、步骤和审核/执行人

工单相关模型设计：
基于上面的设计思路，定义了四个模型：WorkFormModel,ProcessModel,WorkFormTypeModel,ApprovalFormModel

<1> WorkFromTypeModel：工单类型表
	记录了工单类型以及需要的审批流程
	字段信息：
		name(类型名称),
		cn_name(类型的中文名),
		process_step_id(类型的审批流程)
		
<2> ProcessModel：工单流程的审批步骤表
	记录了自定义的流程步骤
	字段信息：
		step(步骤名称)
		step_id(步骤编号)
		approval_require(有审批/执行权限的用户,仅是一个标记,实际的用户集合由后端根据这个标记自定义)
		
<3> WorkFormModel：工单表
	记录了工单的信息
	字段信息：
		title(标题)
		level(紧急程度)
		type(类型,与上面WorkFromTypeModel模型多对一关联)
		detail(详情)
		status(状态)
		applicant(申请人,与User模型多对一关联)
		module_name(模块名,仅限于发布/回滚工单中)
		sql(是否存在sql)
		sql_detail(sql 详情)
		sql_file_url(sql附件url)
		process_step(当前是处在哪个流程步骤中,与ProcessModel模型多对一关联)
		approver_can(当前步骤可以审批/执行的用户,与User模型多对多关联；多数情况是同步了ApprovalFormModel模型的相同字段的关联关系,但是可以基于工单状态自定义这个字段的关联对象)
		create_time(创建时间)
		complete_time(完成时间)

<4> ApprovalFormModel：审批/执行记录表
	记录了一个工单的每一个流程步骤的审批/执行结果
	字段信息：
		workform(工单id,与WorkFormModel模型多对一关联)
		process(流程步骤,与PorcessModel模型多对一关联)
		approver_can(这个工单的当前流程可以审批/执行的人,与User模型多对多关联)
		approver(实际最终审核的用户，与User模型多对一关联)
		result(审批结果)
		approve_note(审批意见)
		approval_time(审批时间)
		
举例说明：
以发布工单为例
1. 仅开发有权限提交发布工单

2. 每一个流程步骤，仅拥有审核权限的用户才能收到这个工单，才能审核
	发布工单的审批流程及拥有审批权限的用户：
	<1> 用户所在的组内成员/leader审核  ---- 用户所在的所有组内的成员
	<2> QA 审核	                       ---- QA 组内的所有成员
	<3> OPS 审核并执行				   ---- OPS 组内的所有成员
	<4> 开发自验					   ---- 这个工单的申请人
	<5> QA 验证                        ---- QA 组内的所有成员
	<6> 完成						   ---- 无

3. 每一个流程步骤的审批结果有四种情况，对应的处理方式如下：
	<1> 通过            ---- 工单进入下一个 流程步骤
	<2> 拒绝            ---- 工单状态置为结束，同时显示哪个用户拒绝审批/执行 这个工单
	<3> 暂停			---- 工单状态置为 暂停，等该审批人沟通确认好后，该审批人再次审批，也只有该审批人能审批
	<4> 异常			---- 工单状态置为 暂停，等该审批人沟通确认好后，该审批人再次审批，也只有该审批人能审批
